"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeadlessInspectorCdp = void 0;
const headless_inspector_core_1 = require("@line/headless-inspector-core");
const dom_1 = require("./events/dom");
const network_1 = require("./events/network");
const runtime_1 = require("./events/runtime");
class HeadlessInspectorCdp {
    constructor() {
        this.enabled = false;
        this.setCommandHandler = (command, handler) => {
            this.commandHandlerMap.set(command, handler); // FIXME
        };
        this.inspector = new headless_inspector_core_1.HeadlessInspector();
        this.commandHandlerMap = new Map();
        this.eventEmitter = (0, headless_inspector_core_1.evemitter)();
    }
    on(event, listener) {
        this.eventEmitter.on(event, listener);
    }
    onAll(listener) {
        this.eventEmitter.onAll(listener);
        return;
    }
    send(command, params) {
        const handler = this.commandHandlerMap.get(command);
        if (!handler)
            return undefined;
        const res = handler(params);
        return res;
    }
    enable() {
        if (this.enabled)
            return;
        this.enabled = true;
        this.inspector.enable();
        (0, runtime_1.attachRuntimeEvents)(this.inspector, this.eventEmitter, this.setCommandHandler);
        (0, network_1.attachNetworkEvents)(this.inspector, this.eventEmitter, this.setCommandHandler);
        (0, dom_1.attachDOMEvents)(this.inspector, this.eventEmitter, this.setCommandHandler);
    }
    disable() {
        // TODO
    }
}
exports.HeadlessInspectorCdp = HeadlessInspectorCdp;
exports.default = HeadlessInspectorCdp;
