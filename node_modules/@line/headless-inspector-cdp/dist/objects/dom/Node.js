"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAttributes = exports.CDPNode = void 0;
class CDPNode {
    //   documentURL?: string;
    //   baseURL?: string;
    //   publicId?: string;
    //   systemId?: string;
    //   internalSubset?: string;
    //   xmlVersion?: string;
    //   name?: string;
    //   value?: string;
    //   pseudoType?: PseudoType;
    //   shadowRootType?: ShadowRootType;
    //   frameId?: Page.FrameId;
    //   contentDocument?: Node;
    //   shadowRoots?: Node[];
    //   templateContent?: Node;
    //   pseudoElements?: Node[];
    //   importedDocument?: Node;
    //   distributedNodes?: BackendNode[];
    //   isSVG?: boolean;
    //   compatibilityMode?: CompatibilityMode;
    constructor({ node, nodeId, parentId, childNodeCount = 0, children = [], }) {
        var _a;
        this.nodeId = nodeId;
        this.parentId = parentId;
        this.backendNodeId = nodeId;
        this.nodeType = node.nodeType;
        this.nodeName = node.nodeName;
        this.localName = node.nodeName.toLowerCase();
        this.nodeValue = (_a = node.nodeValue) !== null && _a !== void 0 ? _a : '';
        this.childNodeCount =
            childNodeCount > 0 ? childNodeCount : children === null || children === void 0 ? void 0 : children.length;
        this.children = children.length > 0 ? children : undefined;
        this.attributes = (0, exports.getAttributes)(node);
    }
}
exports.CDPNode = CDPNode;
const getAttributes = (node) => {
    const attributes = [];
    if (node instanceof Element) {
        const attributesMap = node.attributes;
        for (let i = 0; i < attributesMap.length; i++) {
            const attr = attributesMap.item(i);
            if (attr) {
                attributes.push(attr.name);
                attributes.push(attr.value);
            }
        }
    }
    return attributes;
};
exports.getAttributes = getAttributes;
