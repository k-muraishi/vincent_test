"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachNetworkEvents = void 0;
const RequestWillBeSentEvent_1 = require("../objects/network/RequestWillBeSentEvent");
const ResponseReceivedEvent_1 = require("../objects/network/ResponseReceivedEvent");
const Store_1 = require("../store/Store");
const store = new Store_1.Store();
const attachNetworkEvents = (inspector, eventEmitter, setCommandHandler) => {
    inspector.on('networkRequestHasBeenMade', ({ type, request, requestId, timestamp }) => {
        const params = new RequestWillBeSentEvent_1.RequestWillBeSentEvent({
            requestId,
            documentURL: window.location.href,
            request: {
                url: request.url,
                method: request.method,
                headers: request.headers,
            },
            timestamp,
            type: type === 'fetch' ? 'Fetch' : 'XHR',
        });
        eventEmitter.emit('Network.requestWillBeSent', params);
    });
    inspector.on('networkRequestHasSucceeded', ({ response, requestId, timestamp, type }) => {
        store.store(requestId, response.text);
        const textLength = response.text.length;
        const responseReceived = new ResponseReceivedEvent_1.ResponseReceivedEvent({
            requestId,
            loaderId: requestId,
            timestamp,
            type: type === 'fetch' ? 'Fetch' : 'XHR',
            response: {
                url: response.url,
                statusText: response.status,
                status: response.statusCode,
                headers: response.headers,
                length: textLength,
            },
        });
        eventEmitter.emit('Network.responseReceived', responseReceived);
        eventEmitter.emit('Network.dataReceived', {
            requestId,
            dataLength: textLength,
            encodedDataLength: textLength,
            timestamp,
        });
        eventEmitter.emit('Network.loadingFinished', {
            requestId,
            encodedDataLength: textLength,
            timestamp,
        });
    });
    setCommandHandler('Network.getResponseBody', ({ requestId }) => {
        const response = store.getById(requestId);
        if (typeof response === 'undefined')
            return;
        const isBase64 = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$/.test(response);
        return {
            body: response,
            base64Encoded: isBase64,
        };
    });
};
exports.attachNetworkEvents = attachNetworkEvents;
