"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachDOMEvents = void 0;
const highlight_1 = require("../highlight");
const Node_1 = require("../objects/dom/Node");
const Store_1 = require("../store/Store");
const utils_1 = require("../utils");
// WIP
const toNodeArray = (nodes) => Array.from(nodes).filter((n) => { var _a; return !(n.nodeName === '#text' && ((_a = n.nodeValue) === null || _a === void 0 ? void 0 : _a.trim()) === ''); });
const store = new Store_1.Store();
const recursiveBuildDOMNode = (node, parentId, deps) => {
    const nodeId = (0, utils_1.randomNumId)();
    if (!store.getById(nodeId)) {
        store.store(nodeId, node);
    }
    const childNodes = toNodeArray(node.childNodes);
    if (deps === 0) {
        const cdpNode = new Node_1.CDPNode({
            node,
            nodeId,
            parentId,
            childNodeCount: childNodes.length,
        });
        return cdpNode;
    }
    const children = childNodes.map((child) => {
        const n = recursiveBuildDOMNode(child, nodeId, deps - 1);
        return n;
    });
    return new Node_1.CDPNode({ nodeId, node, parentId, children });
};
const attachDOMEvents = (inspector, eventEmitter, setCommandHandler) => {
    setCommandHandler('DOM.getDocument', () => {
        const rootNode = inspector.send('getRootNode', undefined);
        const root = recursiveBuildDOMNode(rootNode, undefined, 2);
        return { root };
    });
    setCommandHandler('DOM.requestChildNodes', ({ nodeId }) => {
        const node = store.getById(nodeId);
        if (!node) {
            return;
        }
        const children = toNodeArray(node.childNodes).map((child) => recursiveBuildDOMNode(child, nodeId, 2));
        eventEmitter.emit('DOM.setChildNodes', {
            parentId: nodeId,
            nodes: children,
        });
        return;
    });
    const highlight = new highlight_1.Highlight((el) => document.body.appendChild(el));
    setCommandHandler('Overlay.hideHighlight', () => {
        highlight.hide();
    });
    setCommandHandler('Overlay.highlightNode', ({ nodeId, highlightConfig }) => {
        if (!nodeId)
            return;
        const node = store.getById(nodeId);
        if (!node || !(node instanceof Element))
            return;
        const { contentColor } = highlightConfig;
        highlight.show(node, {
            contentColor: rgba(contentColor),
        });
    });
};
exports.attachDOMEvents = attachDOMEvents;
const rgba = ({ r, g, b, a, } = { r: 0, g: 0, b: 0, a: 1 }) => {
    return `rgba(${r},${g},${b},${a})`;
};
