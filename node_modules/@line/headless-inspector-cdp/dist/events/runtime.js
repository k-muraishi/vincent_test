"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachRuntimeEvents = void 0;
const ConsoleAPICalledEvent_1 = require("../objects/runtime/ConsoleAPICalledEvent");
const GetPropertiesResponse_1 = require("../objects/runtime/GetPropertiesResponse");
const ObjectStore_1 = require("../store/ObjectStore");
const utils_1 = require("../utils");
const toCDPConsoleType = (type) => {
    if (type === 'warn')
        return 'warning';
    if (type === 'countReset' ||
        type === 'time' ||
        type === 'timeLog' ||
        type === 'timeStamp' ||
        type === 'group' ||
        type === 'groupCollapsed' ||
        type === 'groupEnd') {
        throw new Error(`console.${type} is not supported yet`);
    }
    return type;
};
const getObjectId = (v) => ObjectStore_1.objectStore.getObjectIdOf(v);
const getObject = (id) => ObjectStore_1.objectStore.getObjectOf(id);
const attachRuntimeEvents = (inspector, eventEmitter, setCommandHandler) => {
    inspector.on('consoleAPIHasBeenCalled', ({ argumentsList, type, timestamp }) => {
        argumentsList.forEach((v) => ObjectStore_1.objectStore.storeObject(v));
        const params = new ConsoleAPICalledEvent_1.ConsoleAPICalledEvent({
            argumentsList,
            type: toCDPConsoleType(type),
            timestamp,
        }, (0, utils_1.randomNumId)(), getObjectId);
        eventEmitter.emit('Runtime.consoleAPICalled', params);
    });
    setCommandHandler('Runtime.getProperties', (params) => {
        const object = getObject(params.objectId);
        if (!(0, utils_1.isObject)(object))
            return undefined;
        const response = new GetPropertiesResponse_1.GetPropertiesResponse(object, getObjectId);
        return response;
    });
};
exports.attachRuntimeEvents = attachRuntimeEvents;
