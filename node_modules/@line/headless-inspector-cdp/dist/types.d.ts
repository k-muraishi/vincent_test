import HeadlessInspector, { EvEmitter } from '@line/headless-inspector-core';
import ProtocolMapping from 'devtools-protocol/types/protocol-mapping';
export declare type JSType = 'object' | 'function' | 'undefined' | 'string' | 'number' | 'boolean' | 'symbol' | 'bigint';
declare type UnrapArray<T extends unknown[]> = T extends (infer U)[] ? U : never;
export declare type CdpEvents = {
    [key in keyof ProtocolMapping.Events]: UnrapArray<ProtocolMapping.Events[key]>;
};
export declare type CdpCommands = {
    [key in keyof ProtocolMapping.Commands]: {
        paramsType: UnrapArray<ProtocolMapping.Commands[key]['paramsType']>;
        returnType: ProtocolMapping.Commands[key]['returnType'];
    };
};
export declare type CdpConverter = (inspector: HeadlessInspector, eventEmitter: EvEmitter<CdpEvents>, setCommandHandler: <Key extends keyof CdpCommands>(command: Key, handler: (params: CdpCommands[Key]['paramsType']) => void | CdpCommands[Key]['returnType']) => void) => void;
export {};
