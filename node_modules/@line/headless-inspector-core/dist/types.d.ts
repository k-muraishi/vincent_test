import { EvEmitter } from './evemitter';
export declare type ConsoleType = Exclude<keyof Console, 'Console'>;
export declare type NetworkRequest = {
    method: string;
    url: string;
    headers: Record<string, string>;
};
declare type TODO = any;
declare type NetworkResponse = {
    url: string;
    rawData: TODO;
    text: string;
    status: string;
    statusCode: number;
    headers: Record<string, string>;
};
interface DebugEvent {
    timestamp: number;
}
interface ConsoleApiHasBeenCalledEvent extends DebugEvent {
    argumentsList: unknown[];
    type: ConsoleType;
}
interface NetworkRequestHasBeenMade extends DebugEvent {
    type: 'xhr' | 'fetch';
    requestId: string;
    request: NetworkRequest;
}
interface NetworkRequestHasSucceeded extends DebugEvent {
    type: 'xhr' | 'fetch';
    requestId: string;
    response: NetworkResponse;
}
export declare type DebugEventMap = {
    consoleAPIHasBeenCalled: ConsoleApiHasBeenCalledEvent;
    networkRequestHasBeenMade: NetworkRequestHasBeenMade;
    networkRequestHasSucceeded: NetworkRequestHasSucceeded;
};
export declare type InspectorEventEmitter = EvEmitter<DebugEventMap>;
export declare type HICommands = {
    getRootNode: {
        paramsType: undefined;
        returnType: Node;
    };
};
export {};
