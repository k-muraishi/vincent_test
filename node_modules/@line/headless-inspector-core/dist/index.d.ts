import { DebugEventMap, HICommands } from './types';
export * from './evemitter';
export * from './interceptors';
export * from './types';
export interface Inspector<Events extends Record<string, unknown>, Commands extends Record<string, {
    paramsType: unknown;
    returnType: unknown;
}>> {
    on<Key extends keyof Events>(event: Key, listener: (v: Events[Key]) => void): void;
    onAll(listener: <Key extends keyof Events>(key: Key, value: Events[Key]) => void): void;
    send<Key extends keyof Commands>(command: Key, params: Commands[Key]['paramsType']): Commands[Key]['returnType'] | undefined;
    enable(): void;
    disable(): void;
}
export declare class HeadlessInspector implements Inspector<DebugEventMap, HICommands> {
    private debugEventEmitter;
    private isEnabled;
    constructor();
    on<Key extends keyof DebugEventMap>(event: Key, listener: (v: DebugEventMap[Key]) => void): void;
    onAll(listener: <Key extends keyof DebugEventMap>(key: Key, value: DebugEventMap[Key]) => void): void;
    send<Key extends keyof HICommands>(command: Key, params: HICommands[Key]['paramsType']): HICommands[Key]['returnType'];
    enable(): void;
    disable(): void;
}
export default HeadlessInspector;
