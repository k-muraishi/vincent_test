"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFetchApiHandler = void 0;
const util_1 = require("./util");
const createFetchApiHandler = (emitter) => {
    return {
        apply: (target, thisArg, argumentsList) => __awaiter(void 0, void 0, void 0, function* () {
            const requestId = (0, util_1.randomId)();
            const start = Date.now();
            const input = argumentsList[0];
            const init = argumentsList[1];
            const url = typeof input === 'string' ? input : input.url;
            const method = typeof input === 'string' ? init === null || init === void 0 ? void 0 : init.method : input.method;
            // TODO: create headers
            // const _reqHeaders =
            //   typeof input === 'string' ? init?.headers : input.headers;
            const reqHeaders = {};
            emitter.emit('networkRequestHasBeenMade', {
                type: 'fetch',
                requestId,
                timestamp: start,
                request: {
                    method: method !== null && method !== void 0 ? method : 'GET',
                    headers: reqHeaders,
                    url,
                },
            });
            const originalResponse = yield Reflect.apply(target, thisArg, argumentsList);
            const response = originalResponse.clone();
            const end = Date.now();
            const headers = {};
            response.headers.forEach((value, key) => {
                headers[key] = value;
            });
            const text = yield response.text();
            emitter.emit('networkRequestHasSucceeded', {
                type: 'fetch',
                requestId,
                timestamp: end,
                response: {
                    url,
                    status: response.statusText,
                    statusCode: response.status,
                    headers,
                    rawData: response,
                    text,
                },
            });
            return originalResponse;
        }),
    };
};
exports.createFetchApiHandler = createFetchApiHandler;
