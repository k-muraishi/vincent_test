"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const headless_inspector_cdp_1 = __importDefault(require("@line/headless-inspector-cdp"));
const client_1 = require("./client");
const INSPECTORS = {
    cdp: headless_inspector_cdp_1.default,
};
const createHiSearchQuery = (id) => {
    const search = new URLSearchParams();
    search.set('hi_id', id);
    return `?${search.toString()}`;
};
const getWsServerUrl = (id) => {
    const scripts = document.getElementsByTagName('script');
    const script = [...scripts].find((s) => /^.*\/headless-inspector.js$/.test(s.src));
    if (!script) {
        throw new Error('headless-inspector.js is missing');
    }
    const src = new URL(script.src);
    const serverUrl = `${src.protocol === 'http:' ? 'ws' : 'wss'}://${src.host}/${createHiSearchQuery(id)}`;
    return serverUrl;
};
const randomId = () => Math.random().toString(36).substr(2, 9);
const getHiIdFromStorage = () => {
    const id = localStorage.getItem('hi_id');
    return id;
};
const saveHiIdToStorage = (id) => {
    localStorage.setItem('hi_id', id);
};
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const hiId = new URLSearchParams(window.location.search).get('hi_id');
        const id = hiId || getHiIdFromStorage() || randomId();
        saveHiIdToStorage(id);
        const serverUrl = getWsServerUrl(id);
        const client = new client_1.HeadlessInspectorClient(new INSPECTORS.cdp());
        client.enable(serverUrl);
        const url = new URL(serverUrl);
        console.log('Headless Inspector has been enabled');
        console.log(`open: devtools://devtools/bundled/inspector.html?${url.protocol.slice(0, -1)}=${url.host}/${createHiSearchQuery(id)}`);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (e) {
        console.error('[Headless Inspector] error: ', e.message);
    }
});
window.addEventListener('load', () => {
    main();
});
