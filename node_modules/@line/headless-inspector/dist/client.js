"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeadlessInspectorClient = void 0;
class HeadlessInspectorClient {
    constructor(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    inspector) {
        this.inspector = inspector;
        this.connected = false;
        this.onWsClose = (e) => {
            this.connected = false;
        };
        this.onWsError = (e) => {
            this.connected = false;
        };
        this.onWsOpen = () => {
            var _a;
            this.connected = true;
            this.inspector.enable();
            (_a = this.ws) === null || _a === void 0 ? void 0 : _a.addEventListener('message', this.onMessageFromDevTools);
        };
        this.onAllDebugEvents = (eventName, data) => {
            const event = {
                method: eventName,
                params: data,
            };
            this.send(event);
        };
        this.onMessageFromDevTools = (msg) => {
            const message = JSON.parse(msg.data);
            const result = this.inspector.send(message.method, message.params);
            const response = {
                id: message.id,
                method: message.method,
                result,
            };
            this.send(response);
        };
        this.inspector.onAll(this.onAllDebugEvents);
    }
    send(message) {
        var _a;
        const json = JSON.stringify(message);
        (_a = this.ws) === null || _a === void 0 ? void 0 : _a.send(json);
    }
    enable(wsUrl) {
        if (this.connected) {
            console.log('Headless Inspector has already been enabled.');
            return;
        }
        this.ws = new WebSocket(wsUrl);
        this.ws.onclose = this.onWsClose;
        this.ws.onopen = this.onWsOpen;
        this.ws.onerror = this.onWsError;
    }
    disable() {
        this.inspector.disable();
    }
}
exports.HeadlessInspectorClient = HeadlessInspectorClient;
