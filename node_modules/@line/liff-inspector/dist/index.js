"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LIFFInspectorPlugin = exports.getOriginFromUrl = exports.getBackendUrl = void 0;
const client_1 = require("@line/headless-inspector/dist/client");
const headless_inspector_cdp_1 = __importDefault(require("@line/headless-inspector-cdp"));
const defaultOrigin = 'wss://localhost:9222/';
const getBackendUrl = (liffId, origin) => {
    const url = `${origin.endsWith('/') ? origin.slice(0, -1) : origin}/?hi_id=${liffId}`;
    return url;
};
exports.getBackendUrl = getBackendUrl;
const getOriginFromUrl = (search) => {
    return new URLSearchParams(search).get('li.origin');
};
exports.getOriginFromUrl = getOriginFromUrl;
class LIFFInspectorPlugin {
    constructor(option) {
        this.option = option;
        this.name = 'inspector';
        this.client = new client_1.HeadlessInspectorClient(new headless_inspector_cdp_1.default());
    }
    connect(url) {
        this.client.enable(url);
    }
    install({ liff }) {
        liff.init = new Proxy(liff.init, {
            apply: (target, thisArg, argArray) => {
                var _a, _b, _c;
                const origin = (_c = (_a = (0, exports.getOriginFromUrl)(window.location.search)) !== null && _a !== void 0 ? _a : (_b = this.option) === null || _b === void 0 ? void 0 : _b.origin) !== null && _c !== void 0 ? _c : defaultOrigin;
                const config = argArray[0];
                const backendUrl = (0, exports.getBackendUrl)(config.liffId, origin);
                try {
                    this.connect(backendUrl);
                }
                catch (e) {
                    console.error("[LIFF Inspector] LIFF inspector couldn't start correctly.", e);
                }
                return Reflect.apply(target, thisArg, argArray);
            },
        });
        return;
    }
}
exports.LIFFInspectorPlugin = LIFFInspectorPlugin;
exports.default = LIFFInspectorPlugin;
